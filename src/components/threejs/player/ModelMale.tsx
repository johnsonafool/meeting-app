/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 modle.glb --types
*/

import * as THREE from "three";
import React, { useEffect, useMemo, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import * as SkeletonUtils from "three/examples/jsm/utils/SkeletonUtils.js";
import { useGraph } from "@react-three/fiber";
import { PlayerActionName } from "@/types/player-type";

type GLTFResult = GLTF & {
  nodes: {
    Body: THREE.SkinnedMesh;
    Bottoms: THREE.SkinnedMesh;
    Eyelashes: THREE.SkinnedMesh;
    Eyes: THREE.SkinnedMesh;
    Hair: THREE.SkinnedMesh;
    Shoes: THREE.SkinnedMesh;
    Tops: THREE.SkinnedMesh;
    mixamorigHips: THREE.Bone;
  };
  materials: {
    Bodymat: THREE.MeshStandardMaterial;
    Bottommat: THREE.MeshStandardMaterial;
    Eyelashmat: THREE.MeshStandardMaterial;
    Hairmat: THREE.MeshStandardMaterial;
    Shoesmat: THREE.MeshStandardMaterial;
    Topmat: THREE.MeshStandardMaterial;
  };
};

type GLTFActions = Record<PlayerActionName, THREE.AnimationAction>;

type Props = JSX.IntrinsicElements["group"] & {
  playAnimation?: PlayerActionName;
};

export function Model(props: Props) {
  const { playAnimation } = props;
  const { scene, animations, materials } = useGLTF(
    "/models/model-male.glb"
  ) as GLTFResult;
  const copiedScene = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes } = useGraph(copiedScene) as GLTFResult;
  const { ref, actions, mixer, names } = useAnimations(animations);
  const [lastAction, setLastAction] = useState<PlayerActionName>("idle");

  useEffect(() => {
    if (playAnimation && actions[lastAction]) {
      actions[lastAction]?.fadeOut(0.2);
    }
    if (playAnimation && actions[playAnimation]) {
      actions[playAnimation]?.reset();
      actions[playAnimation]?.fadeIn(0.2);
      actions[playAnimation]?.play();
      setLastAction(playAnimation);
    }
  }, [playAnimation, mixer, actions, lastAction]);

  return (
    <group {...props} dispose={null}>
      <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.005}>
        <primitive ref={ref} object={nodes.mixamorigHips} />
        <skinnedMesh
          name="Body"
          geometry={nodes.Body.geometry}
          material={materials.Bodymat}
          skeleton={nodes.Body.skeleton}
        />
        <skinnedMesh
          name="Bottoms"
          geometry={nodes.Bottoms.geometry}
          material={materials.Bottommat}
          skeleton={nodes.Bottoms.skeleton}
        />
        <skinnedMesh
          name="Eyelashes"
          geometry={nodes.Eyelashes.geometry}
          material={materials.Eyelashmat}
          skeleton={nodes.Eyelashes.skeleton}
        />
        <skinnedMesh
          name="Eyes"
          geometry={nodes.Eyes.geometry}
          material={materials.Bodymat}
          skeleton={nodes.Eyes.skeleton}
        />
        <skinnedMesh
          name="Hair"
          geometry={nodes.Hair.geometry}
          material={materials.Hairmat}
          skeleton={nodes.Hair.skeleton}
        />
        <skinnedMesh
          name="Shoes"
          geometry={nodes.Shoes.geometry}
          material={materials.Shoesmat}
          skeleton={nodes.Shoes.skeleton}
        />
        <skinnedMesh
          name="Tops"
          geometry={nodes.Tops.geometry}
          material={materials.Topmat}
          skeleton={nodes.Tops.skeleton}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/models/model-male.glb");
