/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 model.glb --types
*/

import * as THREE from "three";
import React, { useEffect, useMemo, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import * as SkeletonUtils from "three/examples/jsm/utils/SkeletonUtils.js";
import { useGraph } from "@react-three/fiber";
import { PlayerActionName } from "@/types/player-type";

type GLTFResult = GLTF & {
  nodes: {
    Ch22_Body: THREE.SkinnedMesh;
    Ch22_Eyelashes: THREE.SkinnedMesh;
    Ch22_Hair: THREE.SkinnedMesh;
    Ch22_Pants: THREE.SkinnedMesh;
    Ch22_Shirt: THREE.SkinnedMesh;
    Ch22_Sneakers: THREE.SkinnedMesh;
    mixamorig2Hips: THREE.Bone;
  };
  materials: {
    Ch22_body: THREE.MeshStandardMaterial;
    Ch22_hair: THREE.MeshStandardMaterial;
  };
};
type GLTFActions = Record<PlayerActionName, THREE.AnimationAction>;

type Props = JSX.IntrinsicElements["group"] & {
  playAnimation?: PlayerActionName;
};

export function Model(props: Props) {
  const { playAnimation } = props;
  const { scene, animations, materials } = useGLTF(
    "/models/model-female.glb"
  ) as GLTFResult;
  const copiedScene = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes } = useGraph(copiedScene) as GLTFResult;
  const { ref, actions, mixer } = useAnimations(animations);
  const [lastAction, setLastAction] = useState<PlayerActionName>("idle");

  useEffect(() => {
    if (playAnimation && actions[lastAction]) {
      actions[lastAction]?.fadeOut(0.2);
    }
    if (playAnimation && actions[playAnimation]) {
      actions[playAnimation]?.reset();
      actions[playAnimation]?.fadeIn(0.2);
      actions[playAnimation]?.play();
      setLastAction(playAnimation);
    }
  }, [playAnimation, mixer, actions, lastAction]);

  return (
    <group {...props} dispose={null}>
      <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
        <primitive ref={ref} object={nodes.mixamorig2Hips} />
        <skinnedMesh
          name="Ch22_Body"
          geometry={nodes.Ch22_Body.geometry}
          material={materials.Ch22_body}
          skeleton={nodes.Ch22_Body.skeleton}
        />
        <skinnedMesh
          name="Ch22_Eyelashes"
          geometry={nodes.Ch22_Eyelashes.geometry}
          material={materials.Ch22_hair}
          skeleton={nodes.Ch22_Eyelashes.skeleton}
        />
        <skinnedMesh
          name="Ch22_Hair"
          geometry={nodes.Ch22_Hair.geometry}
          material={materials.Ch22_hair}
          skeleton={nodes.Ch22_Hair.skeleton}
        />
        <skinnedMesh
          name="Ch22_Pants"
          geometry={nodes.Ch22_Pants.geometry}
          material={materials.Ch22_body}
          skeleton={nodes.Ch22_Pants.skeleton}
        />
        <skinnedMesh
          name="Ch22_Shirt"
          geometry={nodes.Ch22_Shirt.geometry}
          material={materials.Ch22_body}
          skeleton={nodes.Ch22_Shirt.skeleton}
        />
        <skinnedMesh
          name="Ch22_Sneakers"
          geometry={nodes.Ch22_Sneakers.geometry}
          material={materials.Ch22_body}
          skeleton={nodes.Ch22_Sneakers.skeleton}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/models/model-female.glb");
